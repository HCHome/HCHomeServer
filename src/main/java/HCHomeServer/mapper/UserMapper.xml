<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="HCHomeServer.mapper.UserMapper">
	<resultMap type="HCHomeServer.model.db.User" id="userMap">
		<id property="userId" column="user_id"/>
		<result property="nickname" column="nickname"/>
		<result property="signScore" column="sign_score"/>
		<result property="infoId" column="info_id"/>
		<result property="wechatIdentify" column="wechat_identify"/>
		<result property="avatar" column="avatar"/>
		<result property="sex" column="sex"/>
		<result property="school" column="school"/>
		<result property="profession" column="profession"/>
		<result property="job" column="job"/>
		<result property="term" column="term"/>
		<result property="phoneNumber" column="phone_number"/>
		<result property="qqNumber" column="qq_number"/>
		<result property="wechatNumber" column="wechat_number"/>
		<result property="isSingleDog" column="is_single_dog"/>
	</resultMap>
	<select id="getUserByOpenId" parameterType="String" resultMap="userMap">
		select *
		from users
		where wechat_identify = #{openId}
	</select>
	<insert id="addUser" parameterType="HCHomeServer.model.db.User" useGeneratedKeys="true" keyProperty="userId">
		insert into users(info_id, nickname, sign_score, wechat_identify, avatar) values
		(#{infoId},#{nickname},#{signScore},#{wechatIdentify},#{avatar})
	</insert>
	<update id="signScoreAdd">
		update users set sign_score = #{score}+(select sign_score from (select sign_score from users where user_id = #{userId})as temp)
		where user_id = #{userId}
	</update>
	<update id="updateAvatar">
		update users set avatar = #{avatar}
		where user_id=#{userId}
	</update>
	<select id="getUserByUserId" parameterType="int" resultMap="userMap">
		select *
		from users
		where user_id=#{userId}
	</select>
	<select id="getRankByUserId" parameterType="int" resultType="int">
		select count(*)+1
		from users
		where sign_score &gt; (select sign_score
								from users
								where user_id=#{userId})
			  or user_id in(select user_id
			  				from (select *
			  						from sign_record
			  						where user_id in (select user_id
			  											from users
			  											where sign_score = (select sign_score
														from users
														where user_id=#{userId}))
									group by user_id
									having max(created_at) &lt; (select max(created_at) 
																from sign_record 
																where user_id = #{userId}
																)
									) as x
				)
	</select>
	<select id="getTopSignScoreRankList" resultMap="userMap">
		select *
		from users right join (select *
							  from sign_record
							  where sign_id in (select max(sign_id)
							  					from sign_record
							  					group by user_id
							  					)
							  ) as max_sign on (users.user_id = max_sign.user_id)

		order by sign_score desc, max_sign.created_at 
		limit 50
		
	</select>
</mapper>